/*Не выполняя кода, ответить, что выведет браузер и почему:*/

// 1

if (!("a" in window)) {
    var a = 1;
}
alert(a);

/* Если НЕ (переменная "а" в окне, содержащим DOM документ), то переменная а = 1
Браузер выведет окно алерта, со значением "undefined", т.к у нас в условии присутствует отрицание, т.е в окне переменная а, условие не выполнится, переменная не будет определена*/

if ("a" in window) {
    var a = 1;
}
alert(a);

if (!("b" in window)) {
    var a = 1;
}
alert(a);

// при таких вариантах алерт вывел бы "1"

// 2

var b = function a(x) {
    x && a(--x);
};
alert(a);

/* Присвоить переменной "b" значение выполнения функции "a" c аргументом "x", в теле функции логически сравниваются операнды "x" и "a" c аргументом (префиксный декремент от "x") - результатом сравнения будет первое 'true'
Функция ничего не возвращает, не назначает, "х" не определено, выражение ничего не выведет в браузер */

// 3

function a(x) {
    return x * 2;
}
var a;
alert(a);

/* определить функцию "a" с аргументом "x", функция возвращает удвоение аргумента. Определить переменную "a", вывести "a". Аргумент для функции не указан, браузер вернет в алерт определение функции (function a(x) {
    return x * 2;
})

для корректной работы функции нужно задать аргумент */
function a(x) {
    return x * 2;
}
var a;
alert(a(3)); // 6

// 4

function b(x, y, a) {
    arguments[2] = 10;
    alert(a);
}
b(1, 2, 3);

/*
определить функцию "b" с аргументами "x, y, a", функция возвращает удвоение. Третьему элементу массива аргументов присвоить значение 10.
Вывести в алерт аргумент a.
Выполнить функцию b c агрументами (1,2,3)
В теле функции третий элемент массива у нас аргумент "а" меняется с 3 на 10, в алерт выводится 10*/

// 5*

function a() {
    alert(this);
}
a.call(null);

/* Свойство контекста (this) выполнения кода (global, function или eval), которое в нестрогом режиме всегда является ссылкой на объект, а в строгом режиме может иметь любое значение.

В пределах функции значение this зависит от того, каким образом вызвана функция. В строгом режиме ('use strict'), если значение this не установлено в контексте выполнения, оно остаётся undefined

Для того, чтобы при вызове функции установить this в определённое значение, используется call()

В нестрогом режиме, если значение, переданное в call  как this, не является объектом, будет сделана попытка преобразовать его в объект с помощью внутренней операции ToObject 

Поскольку следующий код не в строгом режиме, и значение this не устанавливается вызовом, по умолчанию будет использоваться объект global, которым в браузере является window.(Окно, содержащее DOM документ, описание всех методов, свойств и событий)*/


function a() {
    alert(this);
}
a.call(null); // [object Window]

'use strict'
function a() {
    alert(this);
}
a.call(null); //null
