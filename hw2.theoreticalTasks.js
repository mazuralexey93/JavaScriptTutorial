
/* №1
var a = 1, b = 1, c, d;
c = ++a; alert(c);           // 2
d = b++; alert(d);           // 1
c = (2 + ++a); alert(c);      // 5
d = (2 + b++); alert(d);      // 4
alert(a);                    // 3
alert(b);                    // 3

При использовании префиксной нотации сначала происходит изменение переменной, а потом возврат.

При использовании постфиксной нотации — наоборот: сначала происходит возврат, а потом изменение переменной.

Правило работает одинаково для инкремента и декремента*/


/* №2
Чему будет равен x в примере ниже?
var a = 2;
var x = 1 + (a *= 2);
*/

let a = 2;
let x = 1 + (a *= 2);
console.log(x)

/* Ответ: 5
Исходя из приоритетов выполнения операторов, можно сделать выводы:
Сначала выполняются действия в скобках, потом арифметические операции, после чего происходит присвоение . ( x = 1 + (a = 2*2)
*/

/*№7 Сравнить null и 0. Объяснить результат.*/

console.log(null == 0);  // false
console.log(null != 0);  // true
console.log(null == undefined);  // true
console.log(null === undefined);  // false

/*Значения null (пустое значение) и undefined (неопределено) равны друг другу, и ничему кроме.
При явном преобразовании в число null принимает значение 0, а undefined — NaN.
0 это ноль, то есть не пустое значение, просто число '0' */
